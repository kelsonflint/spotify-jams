{"version":3,"sources":["components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","util/Spotify.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["Track","React","Component","constructor","props","super","this","addTrack","bind","removeTrack","event","onAdd","track","onRemove","renderAction","isRemoval","react_default","a","createElement","className","onClick","render","name","artist","album","TrackList","tracks","map","components_Track_Track","key","id","Playlist","handleNameChange","onNameChange","target","value","onChange","defaultValue","components_TrackList_TrackList","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","setState","onSearch","placeholder","SearchResults","searchResults","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","ReactDOM","components_App_App","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.ed8818cd.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack(event) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(event) {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track}\n                          key={track.id}\n                          onAdd={this.props.onAdd}\n                          isRemoval={this.props.isRemoval}\n                          onRemove={this.props.onRemove} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\n\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\n        <TrackList tracks={this.props.playlistTracks}\n                   isRemoval={true}\n                   onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;","const clientId = '4e8971907df843ec82be5cb047aa44a7'; // Insert client ID here.\nconst redirectUri = 'http://localhost:3000/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}